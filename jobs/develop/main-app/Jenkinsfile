pipeline {
    agent {
        kubernetes {
            label "main-develop-job"
            yaml """
spec:
  imagePullSecrets:
    - name: com.emasphere.dev.ecr
  volumes:
    - name: m2-volume
      persistentVolumeClaim:
       claimName: jenkins-node-container-pv-claim
       namespace: ci
  containers:
  - name: main
    image: 840205991060.dkr.ecr.eu-central-1.amazonaws.com/dev/jenkins-container:1.0.0
    imagePullPolicy: Always
    resources:
    limits:
      memory: "1000Mi"
    command:
    - cat
    tty: true
    volumeMounts:
      - name: m2-volume
        mountPath: /root/.m2
        subPath: agent-m2-home
  - name: redis
    image: redis:4.0.14-alpine3.11
    imagePullPolicy: Always
    ports:
    - containerPort: 6379
    command:
    - redis-server
    tty: true
  - name: rabbitmq
    image: rabbitmq:3.6-alpine
    command:
    - rabbitmq-server
    ports:
    - containerPort: 5672
    tty: true
"""
        }
    }

    triggers {
        githubPush()
        snapshotDependencies()
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "5"))
        disableConcurrentBuilds()
        timeout(time: 10, unit: "MINUTES")
    }

    stages {
        stage("Cloning Repo") {
            steps {
                script {
                    properties([pipelineTriggers([snapshotDependencies(), [$class: "GitHubPushTrigger"]])])
                }
                checkout([$class: "GitSCM",
                    branches: [[name: "*/develop"]],
                    userRemoteConfigs: [
                    [url: "https://github.com/EMAsphere/emasphere.git", credentialsId: "github-user-token"]
                ],
                extensions: [
                    [$class: "PathRestriction", excludedRegions: "", includedRegions: "${MODULE_ROOT_PATH}/.*"]
                ]
                ])
            }
        }
        stage("Build") {
            steps {
                container("main") {
                    withMaven(mavenSettingsConfig: "002b7018-8317-4772-bc20-cf9923ed1c50") {
                        withEnv(["PATH+EXTRA=/usr/share/sencha/bin"]) {
                            sh "echo beginning $PATH"
                            sh "mvn clean package -f ${ROOT_POM_PATH} -B -DskipTests -Pci"
                        }
                    }
                }
            }
        }
        stage("Test") {
            steps {
                container("main") {
                    withMaven(mavenSettingsConfig: "002b7018-8317-4772-bc20-cf9923ed1c50") {
                        sh "mvn test -f ${ROOT_POM_PATH} -B -Pci"
                    }
                }
            }
        }
        stage("Code Analysis") {
            steps {
                container("main") {
                    withSonarQubeEnv("EMAsphere SonarQube") {
                        withMaven(mavenSettingsConfig: "002b7018-8317-4772-bc20-cf9923ed1c50") {
                            sh "mvn sonar:sonar -f ${ROOT_POM_PATH} -B -DskipTests -Pci"
                            waitForQualityGate(webhookSecretId: "jenkins-sonarqube-webhook",  abortPipeline: true)
                        }
                    }
                }
            }
        }
        stage("Install") {
            steps {
                container("main") {
                    withMaven(mavenSettingsConfig: "002b7018-8317-4772-bc20-cf9923ed1c50") {
                        sh "mvn install -f ${ROOT_POM_PATH} -B -DskipTests -Pci"
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend (color: "#2eb886", message: "Stable job ${env.JOB_NAME} [${env.BUILD_NUMBER}] (<${env.BUILD_URL}|Open>)")
        }

        changed {
            emailext subject: "$DEFAULT_SUBJECT",
                     body: "$DEFAULT_CONTENT",
                     replyTo: "$DEFAULT_REPLYTO",
                     to: "$DEFAULT_RECIPIENTS"
        }

        failure {
            slackSend (color: "#FF0000", message: "Unstable job ${env.JOB_NAME} [${env.BUILD_NUMBER}] (<${env.BUILD_URL}|Open>)")

            emailext subject: "$DEFAULT_SUBJECT",
                     body: "$DEFAULT_CONTENT",
                     replyTo: "$DEFAULT_REPLYTO",
                     to: "$DEFAULT_RECIPIENTS"
        }
    }
}

